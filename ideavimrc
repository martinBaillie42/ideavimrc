"" .ideavimrc - Matt Chapman
"" https://www.cyberwizard.io/posts/the-ultimate-ideavim-setup/

"" See also
"" https://github.com/JetBrains/ideavim/discussions/578
"" https://medium.com/@dbilici/a-practical-ideavim-setup-for-intellij-idea-cf74222e7b45
"" https://specifications.freedesktop.org/basedir-spec/latest/
"" You can find a list of commands here: https://jb.gg/h38q75
"" Find more examples here: https://jb.gg/share-ideavimrc
"" Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Enable IdeaVim plugins https:/jb.gg/ideavim-plugins

"" Base Settings
"" ========================================================

" defines the number of lines to leave on the screen before scrolling
set scrolloff=15
" ensures the editor displays the line numbers to the left of the document. 
"set linenumber
" ensure that the Vim mode (normal, insert etc) is displayed at the bottom of the screen
set showmode
" ensure that any commands you execute are displayed at the bottom of the screen.
set showcmd

" use case-insensitive search by default.
set ignorecase
" if any of the search characters are uppercase, treat the search as case-sensitive.
set smartcase
" start searching as you type, rather than waiting for you to submit the complete search string first.
set incsearch
" ensures all of the search results are highlighted.
set hlsearch

" causes the annoying audible bell sound to stop being emitted whenever you enter an invalid input.
set visualbell

" Use system clipboard
set clipboard+=unnamed   

let mapleader = " "


"" Plugin Settings
"" ========================================================

" Surround is already bundled with native IdeaVim, you simply need to enable it. Surround lets you change the ‘surrounds’ of a block of text. 
" For example, you can change double quote characters to single quotes with the following command: 
" cs"' This would result in "Foo bar" becoming 'Foo bar'
set surround

" Highlighted yank is also already bundled as part of IdeaVim. 
" The premise of this one is simple, but very useful. When you yank a character, word, or line, it briefly highlights the content you’ve just yanked.
set highlightedyank

" Specifies the mode to be used when a refactoring selects text to be edited (e.g. renaming, live template fields, introduce variable, etc):
"  keep         Keep the current mode
"  select       Switch to Select mode
"  visual       Switch to Visual mode
" This option is only used when the refactoring is started in Normal,
" Insert or Replace mode. Visual or Select modes are not changed.
set idearefactormode=keep

" When enabled, join commands will be handled by the IDE's "smart join" feature. The IDE can change syntax when joining lines, 
" such as merging string literals or if statements
set ideajoin
          
" Maps Vim's global marks to IDE bookmarks.         
set ideamarks

" https://plugins.jetbrains.com/plugin/15348-ideavim-sneak
" IdeaVim Sneak is a port of the Vim-Sneak plugin to IdeaVim. It acts as a drop in overhaul and replacement for Vim’s search in line functionality. 
" This one isn’t bundled with IdeaVim so you’ll need to install the plugin from the link above.
" Vim uses f and F to search forwards and backwards for an instance of a single character in the current line. 
" Sneak uses s and S to search forwards and backwards across multiple lines, and searches for 2 characters instead, allowing for much more targeted searching.
" You can use ; and , to move to the next and previous search result, respectively.
"set sneak

" NerdTree is bundled with IdeaVim, and allows for Vim-like control over the file explorer. You can use the hjkl keys to navigate the tree structure, 
" open and close directories, and view files in the editor, all without having to use the mouse. We’ll set some keybindings for NerdTree shortly.
set nerdtree

" https://plugins.jetbrains.com/plugin/13360-ideavim-easymotion
" https://plugins.jetbrains.com/plugin/7086-acejump
" IdeaVim-EasyMotion is perhaps the single most useful plugin in this section. It completely revolutionises how you move around in Vim. 
" When you activate easymotion and start typing, it will highlight all instances of the sequence you type, and provide shortcodes which (once typed) 
" will transport the cursor to that particular location. Easymotion isn’t bundled with IdeaVim so you’ll need to install the plugin using the above link, 
" as well as AceJump which is a peer dependency.
" In the above image, I have activated easymotion and typed set. Without having to press enter, all the instances have been highlighted, 
" and I can jump to any of them with a couple of keypresses. So typing jj will transport the cursor to the start of line 7. Nifty right!
" Handy feature - if you type the shortcode in caps it will transport the cursor in visual mode, highlighting everything in between.
" Easymotion settings
"set easymotion
"set notimeout


"" Key mappings
"" ========================================================

" Tab navigation
" Move between tabs with Alt + p/n.
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

nnoremap <C-o> :action Back<CR>
nnoremap <C-i> :action Forward<CR>

" Pane navigation
" Move between panes with Ctrl + h/j/k/l.
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Jump between methods
nnoremap [ :action MethodUp<CR>
nnoremap ] :action MethodDown<CR>

" Easy visual indentation
" Simplify indentation in visual mode, by making the action repeatable.
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
"nnoremap qj @q

" Popup navigation
" Move between autocomplete pop-up suggestions with Ctrl+j/k.
set lookupkeys=<Tab>,<Down>,<Up>,<Enter>,<Left>,<Right>,<C-Down>,<C-Up>,<PageUp>,<PageDown>,<C-Q>
inoremap <C-j> :action EditorDown<CR>
inoremap <C-k> :action EditorUp<CR>

"" Leader commands
"" ========================================================

" Comment lines
map <leader>c <action>(CommentByLineComment)

" Show Quick Documentation
map <leader>qd <action>(QuickJavaDoc)

" Jump around with easymotion
"map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
map <leader>x :NERDTreeToggle<CR>

" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

" Window splits
map <leader>wv <Action>(SplitVertically)
map <leader>wh <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
map <leader>wq <Action>(CloseAllEditors)

" Save all files
map <leader>s <Action>(SaveAll)

" Paste from history
map <leader>p <Action>(PasteMultiple)

" Display options
map <leader>vd <action>(ToggleDistractionFreeMode)
map <leader>vz <action>(ToggleZenMode)
map <leader>vf <action>(ToggleFullScreen)

" Actions
map <leader>am <action>(ShowIntentionActions)
"map <leader>as <action>(SearchEverywhere)

" Find 
map <leader><leader> <action>(RecentFiles)
map <leader>fc <action>(GotoClass)
map <leader>ff <action>(GotoFile)
map <leader>fs <action>(GotoSymbol)
map <leader>fa <action>(GotoAction)
map <leader>ft <action>(TextSearchAction)
map <leader>fp <action>(FindInPath)
map <leader>fl <action>(RecentLocations)

" Tool Windows
map <leader>th <action>(HideAllWindows)
map <leader>tt <action>(ActivateTerminalToolWindow)
map <leader>tc <action>(ActivateCommitToolWindow)
map <leader>tp <action>(ActivateProjectToolWindow)
map <leader>tb <action>(ActivateBookmarksToolWindow)
map <leader>tf <action>(ActivateFindToolWindow)
map <leader>td <action>(ActivateDebugToolWindow)
map <leader>tl <action>(ActivateProblemsViewToolWindow)
map <leader>tr <action>(ActivateStructureToolWindow)
map <leader>ts <action>(ActivateServicesToolWindow)
map <leader>tg <action>(ActivateVersionControlToolWindow)
map <leader>ta <action>(ActivateAIAssistantToolWindow)
map <leader>tj <action>(ActivateElectroJunToolWindowToolWindow)
map <leader>tq <action>(ActivateDatabaseToolWindow)
map <leader>tn <action>(ActivateNotificationsToolWindow)
map <leader>te <Action>(Git.Branches)


" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <leader>fu <Action>(FindUsages)

nmap <leader>n <Action>(ShowNavBar)
nmap <leader>d <Action>(GotoDeclaration)
nmap <leader>i <Action>(GotoImplementation)
nmap <leader>y <Action>(GotoTypeDeclaration)
nmap <leader>gs <Action>(GotoSuperMethod)
nmap <leader>gr <Action>(GotoRelated)
nmap <leader>gt <Action>(GotoTest)

nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)


"mark as a global mark/
nnoremap ma mA
nnoremap mb mB
nnoremap mc mC
nnoremap md mD
nnoremap me mE
nnoremap mf mF
nnoremap mg mG
nnoremap mh mH
nnoremap mi mI
nnoremap mj mJ
nnoremap mk mK
nnoremap ml mL
nnoremap mm mM
nnoremap mn mN
nnoremap mo mO
nnoremap mp mP
nnoremap mq mQ
nnoremap mr mR
nnoremap ms mS
nnoremap mt mT
nnoremap mu mU
nnoremap mv mV
nnoremap mw mW
nnoremap mx mX
nnoremap my mY
nnoremap mz mZ

"go to global marks
nnoremap 'a `A
nnoremap 'b `B
nnoremap 'c `C
nnoremap 'd `D
nnoremap 'e `E
nnoremap 'f `F
nnoremap 'g `G
nnoremap 'h `H
nnoremap 'i `I
nnoremap 'j `J
nnoremap 'k `K
nnoremap 'l `L
nnoremap 'm `M
nnoremap 'n `N
nnoremap 'o `O
nnoremap 'p `P
nnoremap 'q `Q
nnoremap 'r `R
nnoremap 's `S
nnoremap 't `T
nnoremap 'u `U
nnoremap 'v `V
nnoremap 'w `W
nnoremap 'x `X
nnoremap 'y `Y
nnoremap 'z `Z

